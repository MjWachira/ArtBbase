@page "/register"

@inject IAuth authInterface;
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<div class="main">
    <div class="left">
    </div>

    <div class="right">

        <EditForm Model="@newUser" OnValidSubmit="regUser">


                <div class="logform">
                    <h3>Welcome: Register Here</h3>

                    <!-- Validation messages for Name -->
                    <ValidationMessage For="@(() => newUser.Name)" />

                    <label for="names">Full Names:</label>
                    <input type="text" @bind="newUser.Name" id="names" name="names" required>

                    <!-- Validation messages for Email -->
                    <ValidationMessage For="@(() => newUser.Email)" />

                    <label for="email">Email:</label>
                    <input type="email" @bind="newUser.Email" id="email" name="email" required>

                    <!-- Validation messages for PhoneNumber -->
                    <ValidationMessage For="@(() => newUser.PhoneNumber)" />

                    <label for="phone">Phone Number:</label>
                    <input type="number" @bind="newUser.PhoneNumber" id="phone" name="phone" required>

                    <!-- Validation messages for Password -->
                    <ValidationMessage For="@(() => newUser.Password)" />

                    <label for="password">Password:</label>
                    <input type="password" @bind="newUser.Password" id="password" name="password" required>

                    <!-- Confirm password input and validation messages omitted for brevity -->

                    <button type="submit" class="loginbtn">Register</button>

                    <p>Already a user?<a href="/Login">Login Here</a></p>
                </div>
          
        </EditForm>


    </div>

</div>

@code {
    private RegisterRequestDto newUser = new RegisterRequestDto();

    private async Task regUser()
    {
        newUser.Image = "https://cdn.pixabay.com/photo/2016/04/01/10/11/avatar-1299805_1280.png";
        var res = await authInterface.Register(newUser);

        // Check if registration is successful
        if (res.IsSuccess ==true && res.Result !=null)
        {
            // Show toastr notification with success message
            await jsRuntime.InvokeVoidAsync("ShowToastr", "success", res.Result);
            navigationManager.NavigateTo("/login");

        }
        else
        {
            
            // Show toastr notification with error message
            await jsRuntime.InvokeVoidAsync("ShowToastr", "error", res.Errormessage);
        }
    }
}

