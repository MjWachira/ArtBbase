@page "/adminproducts"


@using System.Security.Claims;
@inject IJSRuntime jsRuntime
@inject IArt artInterface
@inject NavigationManager navigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<MyAdminLayout></MyAdminLayout>


<style>
    .topnav {
        margin-top: 51px;
        margin-right: auto;
        margin-left: auto;
        color: #CB4427
    }

        .topnav button {
            background-color: white;
            color: #CB4427;
            border: solid 1px;
            border-color: #CB4427;
            height: 35px;
            border-radius: 5px;
            padding: 10px;
            margin: 5px;
            transition: 0.5s;
        }

            .topnav button:hover {
                background-color: black;
                color: white;
                cursor: pointer;
                transition: 0.5s;
            }

    .topon {
        margin-right: auto;
        margin-left: auto;
        color: #CB4427
    }
</style>
<div class="app">
    <div class="topnav">
        <a href="admin"><button>All Auctions</button> </a>
        <a href="adminproducts"><button>My Auctions</button> </a>
        <a href="art"><button>Add Auctions</button> </a>
    </div>
    <h3 class="topon">Manage My Art On Auction</h3>



    @if (iSLoading)
    {
        <p><i>Loading...</i></p>
    }
    else
    {

        @if (arts.Count > 0)
        {
            <div class="items">
                @foreach (var art in arts)
                {
                    <div class="bid-item">
                        <div class="bid-img">
                            <img src="@art.Image" />
                        </div>
                        <div class="bid-details">
                            <div class="bid-left">
                                <h4> @art.Name </h4>
                                <span style="display:flex;">Higest Bid: <p>Ksh @art.HighestBid </p></span>
                                <span style="display:flex;">Start Price: <p>Ksh @art.StartPrice</p></span>
                                <a href="/art/@art.Id"><button class="btn-view">Edit</button></a>
                            </div>
                            <div class="bid-right">
                                <h4>@GetRemainingTime(art.StopTime)</h4>
                                <p style="Padding:4px;">Biding @art.Status</p>
                                <button class="btn-close">Close Bid</button>
                                <button class="btn-bid" @onclick="@(()=>deleteArt(art.Id))">Delete</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p><i>No Art Found!!</i></p>
        }
    }

</div>

@code {
    private bool iSLoading = true;
    private List<ArtDto> arts = new List<ArtDto>();
    private Dictionary<Guid, BidDto> highestBids = new Dictionary<Guid, BidDto>();
    [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }
    private string UserId;

    protected override async Task OnInitializedAsync()
    {
        UserId = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "UserId");
        arts = await artInterface.GetUserArtsAsync(new Guid(UserId));
        iSLoading = false;

        // Start the timer to update the UI every second
        var timer = new System.Threading.Timer(async (_) =>
        {
            await InvokeAsync(() => StateHasChanged());
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }


    private async Task deleteArt(Guid id)
    {
        var res = await artInterface.DeleteArt(id);
        arts = await artInterface.GetArtsAsync();
    }
    private string GetRemainingTime(DateTime expiresAt)
    {
        var remainingTime = expiresAt - DateTime.Now;
        if (remainingTime.TotalSeconds < 0)
        {
            return "00d 00h 00m 00s";
        }
        else
        {
            return $"{remainingTime.Days}d {remainingTime.Hours}h {remainingTime.Minutes}m {remainingTime.Seconds}s";
        }
    }

}


