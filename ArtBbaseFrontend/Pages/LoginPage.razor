@page "/login"
@using System.ComponentModel.DataAnnotations

@inject IAuth authInterface
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navigationManager

<EditForm Model="@user" OnValidSubmit="loginUser">
    <div class="main">
        <div class="left">
        </div>
        <div class="right">
            <div class="logform">
                <h3>Welcome Back</h3>
                <div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {

                        <p class="error">@errorMessage</p>
                    }

                </div>

                <label for="email">Email:</label>
                <InputText @bind-Value="user.Username" id="email" name="email" style="outline: #CB4427;
                                                                                        border: none;
                                                                                        height: 25px;
                                                                                        border-radius: 10px;
                                                                                        padding: 5px;
                                                                                      " required />
                <ValidationMessage For="@(() => user.Username)" />

                <label for="password">Password:</label>
                <InputText type="password" @bind-Value="user.Password" id="password" name="password" class="inputs" style="outline: #CB4427;
                                                                                        border: none;
                                                                                        height: 25px;
                                                                                        border-radius: 10px;
                                                                                        padding: 5px;
                                                                                      " required />
                <ValidationMessage For="@(() => user.Password)" />

                <label for="confirmPassword">Confirm Password:</label>
                <InputText type="password" @bind-Value="confirmPassword" id="confirmPassword" name="confirmPassword" class="inputs" style="outline: #CB4427;
                                                                                        border: none;
                                                                                        height: 25px;
                                                                                        border-radius: 10px;
                                                                                        padding: 5px;
                                                                                      " required />
                <ValidationMessage For="@(() => confirmPassword)" />

                <button type="submit" class="loginbtn">Login</button>
                <p>New User? <a href="/register">Register Here</a></p>

            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginRequestDto user = new LoginRequestDto();
    private string confirmPassword;
    private string errorMessage;

    private async Task loginUser()
    {
        if (user.Password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var res = await authInterface.Login(user);
        var usr = res.User;

        if (!string.IsNullOrWhiteSpace(res.Token))
        {
            await localStorage.SetItemAsStringAsync("Token", res.Token);
            await localStorage.SetItemAsStringAsync("UserId", usr.Id);
            await authProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/home");
        }
        else
        {
            errorMessage = "Login failed. Please check your credentials.";
        }
    }
}
